//----------------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: DoC_rfd_txd.bt
//   Authors: Surihix
//   Version: 1.0
//   Purpose: Parse Dirge Of Cerberus's rfd & txd archives
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//   1.0   2025-01-08 Surihix: Initial version
//----------------------------------------------------------

LittleEndian();

typedef struct HEADER
{
    char rfdOrTxdName[8]<bgcolor=cDkGreen>;
    char extension[4]<bgcolor=cDkGreen>;
    Assert(extension == "rfd" || extension == "txd");
    
    uint32 fileSize<bgcolor=cDkGreen>;    
    uint16 fileCount<bgcolor=cDkGreen>;
    ubyte reserved<bgcolor=cBlack>;
    ubyte typeFlag<bgcolor=cDkYellow, comment="indicates how to parse each entry">;
    uint32 fileOffsets[fileCount]<bgcolor=cDkGreen>;
}Header;


typedef struct PACKEDTYPE2
{
    char fileName[8]<bgcolor=0xbf6b6c>;
    char fileExtension[4]<bgcolor=0xbf6b6c>;
    uint32 dataSize<bgcolor=cDkYellow, comment="may not always be correct. size includes this offset and the previous 12 bytes">;
}PackedType2;


typedef struct PACKEDTYPE1
{
    char fileName[8]<bgcolor=0xbf6b6c>;
    char fileExtension[4]<bgcolor=0xbf6b6c>;
    uint32 dataSize<bgcolor=cDkYellow, comment="not correct most of the time">;
    char fileName2[8]<bgcolor=0xbf6b6c>;
    ubyte reserved[8]<bgcolor=cBlack>;
}PackedType1;


struct FILE
{
    Header header<name="Header", optimize=false, open=true>;

    local int i = 0;
    for (i = 0; i < header.fileCount; i++) 
    {
        FSeek(header.fileOffsets[i]);
        if (header.typeFlag == 1)
        {  
           PackedType1 packedType1<name="Type1 File Entry", optimize=false>;   
        }
        else if (header.typeFlag == 2)
        {
           PackedType2 packedType2<name="Type2 File Entry", optimize=false>;
        }
    }
}File<open=true, name="DoC rfd or txd archive">;